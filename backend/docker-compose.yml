version: '3.8'

services:
  mongodb:
    image: mongo:7.0
    container_name: error-tracking-mongodb
    restart: unless-stopped
    ports:
      - '${MONGO_PORT:-27017}:27017'
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - mongodb_data:/data/db
    networks:
      - error-tracking-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.4
    container_name: error-tracking-elasticsearch
    restart: unless-stopped
    ports:
      - '${ELASTIC_PORT:-9200}:9200'
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-}
      - ES_JAVA_OPTS=${ELASTIC_JAVA_OPTS:--Xms512m -Xmx512m}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - error-tracking-network
    healthcheck:
      test: curl -u elastic:${ELASTIC_PASSWORD:-elastic123} -s -f http://localhost:9200/_cat/health >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2.11-alpine
    container_name: error-tracking-redis
    restart: unless-stopped
    ports:
      - '${REDIS_PORT:-6379}:6379'
    entrypoint: /bin/sh
    command:
      - -c
      - |
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-server --requirepass "$$REDIS_PASSWORD"
        else
          redis-server
        fi
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - error-tracking-network
    healthcheck:
      test: |
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-cli -a "$$REDIS_PASSWORD" ping || exit 1
        else
          redis-cli ping || exit 1
        fi
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.5
    container_name: error-tracking-zookeeper
    restart: unless-stopped
    ports:
      - '${ZOOKEEPER_PORT:-2181}:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - error-tracking-network
    healthcheck:
      test: nc -z localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.7.5
    container_name: error-tracking-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '${KAFKA_PORT:-9092}:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:${KAFKA_PORT:-9092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - error-tracking-network
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongodb_data:
    driver: local
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local

networks:
  error-tracking-network:
    driver: bridge
